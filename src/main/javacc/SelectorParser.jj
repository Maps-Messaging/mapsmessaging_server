/*
 * JBossMQ, the OpenSource JMS implementation
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */

 /**
  * A JavaCC 2.0 grammar for the JMS 1.0.2 message selectors.
  *
  * @see http://www.webgain.com/products/metamata/java_doc.html
  *
  * @author Scott.Stark@jboss.org
  */

/**
* Unicode supported add via StackOverflow page
* @Link https://stackoverflow.com/questions/30933785/javacc-and-unicode-issue-why-u696d-cannot-be-managed-in-javacc-although-it-bel
*/
// ----------------------------------------------------------------------------
// OPTIONS
// ----------------------------------------------------------------------------
options {
  STATIC = false;
  UNICODE_INPUT = true;
  ERROR_REPORTING = false;
  LOOKAHEAD = 3;
  FORCE_LA_CHECK = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SelectorParser)

package org.maps.selector;

import org.maps.selector.operators.ParserBooleanOperation;
import org.maps.selector.operators.ParserExecutor;
import org.maps.selector.operators.Operation;
import org.maps.selector.operators.ParserOperationExecutor;
import org.maps.selector.operators.arithmetic.*;
import org.maps.selector.operators.comparison.*;
import org.maps.selector.operators.logical.*;
import org.maps.selector.operators.functions.*;
import org.maps.selector.operators.extentions.ParserFactory;

import java.io.ByteArrayInputStream;
import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class SelectorParser {

  private Map<String, Identifier> identifierMap = new LinkedHashMap();

  public SelectorParser(){
  }

 public Object parse(String selector, boolean trace)
      throws ParseException
   {
      // This will have no effect unless the debugging options are true
      if (trace)
      {
         this.enable_tracing();
      }
      else
      {
         this.disable_tracing();
      }

      return this.expression();
   }
   /**
    * Strip off the leading and trailing (quote) chars from the given string
    * and return it.  Does not actually check to make sure they are '\'' chars.
    */
   private String stripQuotes(String image)
   {
      return image.substring(1, image.length() - 1);
   }

  public static ParserExecutor compile(String selector)
     throws ParseException
   {
      Object parser = compile(selector,  false);
      if (parser instanceof Operation) {
        parser = ((Operation) parser).compile();
        if (parser instanceof Operation) {
          return new ParserOperationExecutor((Operation) parser);
        }
      }
      if(parser instanceof Boolean){
        return new ParserBooleanOperation((Boolean) parser);
      }
     return new ParserBooleanOperation((Boolean) false);
   }

   private static Object compile(String selector,  boolean trace)
      throws ParseException
   {
      SelectorParser parser = new SelectorParser(new ByteArrayInputStream(selector.getBytes()), "UTF-8");
      return parser.parse(selector, trace);
   }
}

PARSER_END(SelectorParser)

// ----------------------------------------------------------------------------
// Tokens
// ----------------------------------------------------------------------------

/* IGNORE WHITESPACE */

SKIP :
{
    " "
  | "\r"
  | "\t"
  | "\n"
}


/* RESERVED WORDS AND LITERALS */

TOKEN [IGNORE_CASE]:
{
    < TRUE:      "TRUE" >
  | < FALSE:     "FALSE" >
  | < NULL:      "NULL" >
  | < AND:       "AND" >
  | < NOT:       "NOT" >
  | < OR:        "OR" >
  | < BETWEEN:   "BETWEEN" >
  | < LIKE:      "LIKE" >
  | < IN:        "IN" >
  | < IS:        "IS" >
  | < PARSER:    "PARSER">
  | < ESCAPE:    "ESCAPE" >
  | < LPAREN:    "(" >
  | < RPAREN:    ")" >
  | < SEMICOLON: ";" >
  | < COMMA:     "," >
  | < TIME:      "{time}" >
}

/* OPERATORS */

TOKEN :
{
    < MULT:  "*" >
  | < DIV:   "/" >
  | < MINUS: "-" >
  | < PLUS:  "+" >
  | < GT:    ">" >
  | < GE:    ">=" >
  | < LT:    "<" >
  | < LE:    "<=" >
  | < NE:    "<>" >
  | < EQ:    "=" >
}

/* Literals */

TOKEN :
{
    < LONG: ( ["0" - "9"] )+ >
  |
    < DOUBLE:   <FLOAT> |
                <FLOAT> ( ["e","E"] ([ "-","+"])? <LONG> )? |
                <FLOAT> (["f","F","d","D"])? |
                <LONG> (["f","F","d","D"])?
    >
  |
    < #FLOAT: <LONG> ( "." (<LONG>)? ) | "." <LONG> >
  |
    < STRING: <QUOTE> ( (~["'","\n","\r"]) | (<QUOTE><QUOTE>) )* <QUOTE> >
  |
    < #QUOTE: ["'", "`"] >
}

/* Function names */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: [ "_","$",
     "\u0024",
     "\u0041"-"\u005a",
     "\u005f",
     "\u0061"-"\u007a",
     "\u00c0"-"\u00d6",
     "\u00d8"-"\u00f6",
     "\u00f8"-"\u00ff",
     "\u0100"-"\u1fff",
     "\u3040"-"\u318f",
     "\u3300"-"\u337f",
     "\u3400"-"\u3d2d",
     "\u4e00"-"\u9fff",
     "\uf900"-"\ufaff"
  ]>
|
  < #DIGIT: ["0" - "9"] >
}

/** Start of the grammar */

Object expression() :
{
   Object exp1 = null;
}
{
   exp1 = logicExpression() <EOF>
   {
      return exp1;
   }
}

Object logicExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=notExpression()
   (
      <AND> exp2=notExpression()
      {
         exp1 = new AndOperator( exp1, exp2);
      }
      | <OR> exp2=notExpression()
      {
         exp1 = new OrOperator(exp1, exp2);
      }
   )*
   { return exp1; }
}

Object notExpression() :
{
   Object exp1 = null;
}
{
  exp1=relationalExpression()
   { return exp1; }
  | <NOT> exp1=relationalExpression()
      {
         return new NotOperator(exp1);
      }
}

Object relationalExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
  exp1=orEqualExpression()
  (
      <LT> exp2=orEqualExpression()
      {
        exp1 = new LessThanOperator(exp1, exp2);
      }
      | <GT> exp2=orEqualExpression()
      {
           exp1 = new GreaterThanOperator(exp1, exp2);
        }
  )*
   { return exp1; }
}

Object orEqualExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
  exp1=equalExpression()
  (
    ( <LE> exp2=equalExpression()
      {
         exp1 = new LessOrEqualOperator(exp1, exp2);
      }
    )
	|
    ( <GE> exp2=equalExpression()
      {
        exp1 = new GreaterOrEqualOperator(exp1, exp2);
      }
    )
   )*
   { return exp1; }
}


Object equalExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
   Object exp3 = null;
   Set<String> set = null;
}
{
    exp1=additiveExpression()
    (  <NE> exp2=additiveExpression()
       {
   exp1 = new DifferentOperator(exp1, exp2);
}
 	| <EQ> exp2=additiveExpression()
       {
          exp1 = new EqualOperator( exp1, exp2);
       }
   | <IS> exp1=nullExp(exp1)
   | <BETWEEN> exp2=additiveExpression() <AND> exp3=additiveExpression()
       {
          exp1 = new BetweenOperator(exp1, exp2, exp3);
       }
   | <IS> exp1=nullExp(exp1)
   | <NOT> <BETWEEN> exp2=additiveExpression() <AND> exp3=additiveExpression()
       {
          exp1 = new BetweenOperator(exp1, exp2, exp3);
          exp1 = new NotOperator(exp1);
       }
   | <LIKE> exp1=likeExp(exp1)
   | <NOT> <LIKE> exp1=likeExp(exp1)
       {
          exp1 = new NotOperator(exp1);
       }
   | <IN> <LPAREN> { set = new HashSet<String>(); } stringSet(set) <RPAREN>
       {
          exp1 = new InOperator(exp1, set);
       }
   | <NOT> <IN> <LPAREN> { set = new HashSet<String>(); } stringSet(set) <RPAREN>
       {
          exp1 = new InOperator(exp1, set);
          exp1 = new NotOperator(exp1);
       }
    )*
    { return exp1; }
}


Object additiveExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
  exp1=multiplicativeExpression()
  (
    ( <PLUS> exp2=multiplicativeExpression()
      {
         exp1 = new AddOperator(exp1, exp2);
      }
    )
    |
    ( <MINUS> exp2=multiplicativeExpression()
      {
         exp1 = new SubtractOperator(exp1, exp2);
      }
    )
  )*
  { return exp1; }
}

Object multiplicativeExpression() :
{
   Object exp1 = null;
   Object exp2 = null;
}
{
   exp1=unaryExpression()
   (
      ( <MULT> exp2=unaryExpression()
         {
            exp1 = new MultiplyOperator(exp1, exp2);
         }
       )
   |
      ( <DIV> exp2=unaryExpression()
         {
            exp1 = new DivideOperator(exp1, exp2);
         }
      )
   )*
   { return exp1; }
}

Object unaryExpression() :
{
   Object exp1 = null;
}
{
   <PLUS> exp1=unaryExpression()
      { return exp1; }
   | <MINUS> exp1=unaryExpression()
      { return new NegateOperator(exp1); }
   | exp1=unaryExpressionNotPlusMinus()
      { return exp1; }
}

Object unaryExpressionNotPlusMinus() :
{
   Token t = null;
   Object exp = null;
   List<String> list = null;
}
{
   t=<IDENTIFIER>
      {
         Identifier id = identifierMap.get(t.image);
         if( id == null ) {
            id = new Identifier(t.image);
            identifierMap.put(t.image, id);
         }
         return id;
      }
   | t=<STRING>  { return stripQuotes(t.image); }
   | t=<DOUBLE>  { return Double.valueOf(t.image); }
   | t=<LONG>    { return Long.valueOf(t.image); }
   | t=<TRUE> { return Boolean.TRUE; }
   | t=<FALSE> { return Boolean.FALSE; }
   | <LPAREN> exp=logicExpression() <RPAREN>
      { return exp; }
   | <PARSER> <LPAREN> exp=parserName() <COMMA> { list = new ArrayList<String>(); } stringList(list) <RPAREN>
       {
         return ParserFactory.getInstance().loadParser(exp, list);
       }
   | <TIME>   {  return System.currentTimeMillis();}
}

Object parserName() :
{
   Token t = null;
   Object exp = null;
}
{
   t=<IDENTIFIER>
      {
         Identifier id = identifierMap.get(t.image);
         if( id == null ) {
            id = new Identifier(t.image);
            identifierMap.put(t.image, id);
         }
         return id;
      }
   | t=<STRING>  { return stripQuotes(t.image); }
}

Operation nullExp(Object exp1) :
{
   Token not = null;
}
{
   [ not=<NOT> ] <NULL>
   {
      return not == null ? new IsOperator(exp1, false) : new IsOperator(exp1, true);
   }
}

Operation likeExp(Object exp1) :
{
   Object exp2 = null;
   Object exp3 = null;
   Token esc = null;
}
{
   exp2=additiveExpression()
   [ esc=<ESCAPE> exp3=additiveExpression() ]
      {
         Operation op = null;
         if( esc == null )
            op = new LikeOperator( exp1, exp2);
         else
            op = new LikeOperator( exp1, exp2, exp3);
         return op;
      }
}


void stringSet(Set<String> set):
{}
{
    stringSetToken(set) ( <COMMA> stringSetToken(set))*
}

void stringSetToken(Set<String> set) :
{
   Token t = null;
}
{
   [ t=<STRING> ]
      { if( t != null ) set.add(stripQuotes(t.image)); }
}

void stringList(List<String> list):
{}
{
    stringToken(list) ( <COMMA> stringToken(list))*
}

void stringToken(List<String> list) :
{
   Token t = null;
}
{
   [ t=<STRING> ]
      { if( t != null ) list.add(stripQuotes(t.image)); }
}
